def color_map =[
    'SUCCESS' : 'good',
    'FAILURE' : 'danger'
    ]
pipeline{
    agent any
    tools {
        jdk 'java17'
        nodejs 'nodejs23'
    }
    environment{
        SCANNER_HOME = tool 'sonarscanner'
    }
    stages{
        stage('notify'){
            steps{
            slackSend(
                channel: '#deployment-prod',
                message: "${env.JOB_NAME} - Job started For more details check out ${env.BUILD_URL}")
        }
        }
        stage('clean Workspace'){
            steps{
                cleanWs()
            }
        }
        stage('git Checkout'){
            steps{
                git branch: 'main' , url: 'https://github.com/vijaysai1718/music'
            }
        }
        stage('File scan'){
            steps{
                sh "trivy fs . > trivyfile.txt"
            }
        }
        stage('Sonar Scanner'){
            steps{
                
                    withSonarQubeEnv('sonarserver'){
                        sh '''
                        $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=music -Dsonar.projectKey=music
                        '''
                    
                }
            }
        }
        stage('Quailty Gate'){
            steps{
                waitForQualityGate abortPipeline: false , credentialsId: 'sonarkey'
                }
            }
            stage('NPM Dependices'){
                steps{
                    sh "npm install"
                }
            }
            stage('Build Image'){
                steps{
                   withDockerRegistry(credentialsId: 'docker' , url: 'https://index.docker.io/v1/') {
                       sh '''
                       docker build -t spotify .
                       docker tag spotify vijaysai1718/spotify:latest 
                       docker push vijaysai1718/spotify:latest
                       '''
} 

                
                }
            }
            stage('Image Scan'){
                steps{
                    sh "trivy image vijaysai1718/spotify:latest > trivyImage.txt"
                }
            }
            stage('Run container'){
                steps{
                    sh '''
                    docker stop spotify || true
                    docker rm spotify || true
                    docker run -d --name spotify -p 3000:3000 vijaysai1718/spotify:latest
                    '''
                }
            }
        
    }
    post{
        always{
             slackSend(
                channel: '#deployment-prod',
                color: color_map[currentBuild.currentResult],
                message: "${env.JOB_NAME} - Build Number- ${env.JOB_NUMBER} Job is ${currentBuild.currentResult} For more details check out ${env.BUILD_URL}")
        }
    }
}